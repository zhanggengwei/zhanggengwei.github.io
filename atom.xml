<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blogs</title>
  
  <subtitle>张庚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-11T08:34:46.417Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhanggeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript-Browser</title>
    <link href="http://yoursite.com/2018/05/11/javascript-Browser/"/>
    <id>http://yoursite.com/2018/05/11/javascript-Browser/</id>
    <published>2018-05-11T06:34:43.000Z</published>
    <updated>2018-05-11T08:34:46.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h1><h2 id="Window-对象-1"><a href="#Window-对象-1" class="headerlink" title="Window 对象"></a>Window 对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Window 对象表示浏览器中打开的窗口。</span><br><span class="line">如果文档包含框架（&lt;frame&gt; 或 &lt;iframe&gt; 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。</span><br><span class="line">注意： 没有应用于 window 对象的公开标准，不过所有浏览器都支持该对象。</span><br></pre></td></tr></table></figure><h2 id="Window-对象属性"><a href="#Window-对象属性" class="headerlink" title="Window 对象属性"></a>Window 对象属性</h2><h2 id="Window-对象方法"><a href="#Window-对象方法" class="headerlink" title="Window 对象方法"></a>Window 对象方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="#alert">alert()</a></td><td>显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td><a href="#blur">blur()</a></td><td>把键盘焦点从顶层窗口移开。</td></tr><tr><td><a href="#clearInterval">clearInterval()</a></td><td>取消由 setInterval() 设置的 timeout。</td></tr><tr><td><a href="#clearTimeout">clearTimeout()</a></td><td>取消由 setTimeout() 方法设置的 timeout。</td></tr><tr><td><a href="#close">close()</a></td><td>关闭浏览器窗口。</td></tr><tr><td><a href="#confirm">confirm()</a></td><td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td><a href="#createPopup">createPopup()</a></td><td>创建一个 pop-up 窗口。(只有IE支持)</td></tr><tr><td><a href="#focus">focus()</a></td><td>把键盘焦点给予一个窗口</td></tr><tr><td><a href="#moveBy">moveBy()</a></td><td>可相对窗口的当前坐标把它移动指定的像素。</td></tr><tr><td><a href="#moveTo">moveTo()</a></td><td>把窗口的左上角移动到一个指定的坐标。</td></tr><tr><td><a href="#open">open()</a></td><td>打开一个新的浏览器窗口或查找一个已命名的窗口。</td></tr><tr><td><a href="#print">print()</a></td><td>打印当前窗口的内容。</td></tr><tr><td><a href="#prompt">prompt()</a></td><td>显示可提示用户输入的对话框。</td></tr><tr><td><a href="#resizeBy">resizeBy()</a></td><td>按照指定的像素调整窗口的大小。</td></tr><tr><td><a href="#resizeTo">resizeTo()</a></td><td>把窗口的大小调整到指定的宽度和高度。</td></tr><tr><td><a href="#scrollBy">scrollBy()</a></td><td>按照指定的像素值来滚动内容</td></tr><tr><td><a href="#scrollTo">scrollTo()</a></td><td>把内容滚动到指定的坐标。</td></tr><tr><td><a href="#setInterval">setInterval()</a></td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式</td></tr><tr><td><a href="#setTimeout">setTimeout()</a></td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr></tbody></table><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h4><div id=""></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(message)</span><br></pre></td></tr></table></figure><h4 id="blur"><a href="#blur" class="headerlink" title="blur"></a>blur</h4><div id="blur"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.blur()</span><br></pre></td></tr></table></figure><h4 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h4><div id="clearInterval"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clearInterval(id_of_setinterval)</span><br><span class="line">id_of_setinterval 调用 setInterval() 函数时所获得的返回值，使用该返回标识符作为参数，可以取消该 setInterval() 所设定的定时执行操作。</span><br></pre></td></tr></table></figure><h4 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a>clearTimeout()</h4><div id="clearTimeout"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clearTimeout(id_of_settimeout)</span><br><span class="line">id_of_settimeout 调用 setTimeout() 函数时所获得的返回值，使用该返回标识符作为参数，可以取消该 setTimeout() 所设定的定时执行操作。</span><br></pre></td></tr></table></figure><h4 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h4><div id="close"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.close()</span><br></pre></td></tr></table></figure><h4 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h4><div id="confirm"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confirm(message)</span><br></pre></td></tr></table></figure><h4 id="createPopup"><a href="#createPopup" class="headerlink" title="createPopup()"></a>createPopup()</h4><div id="createPopup"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.createPopup()</span><br></pre></td></tr></table></figure><h4 id="focus"><a href="#focus" class="headerlink" title="focus()"></a>focus()</h4><div id="focus"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.focus()</span><br></pre></td></tr></table></figure><h4 id="moveBy"><a href="#moveBy" class="headerlink" title="moveBy()"></a>moveBy()</h4><div id="moveBy"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.moveBy(x,y)</span><br></pre></td></tr></table></figure><h4 id="moveTo"><a href="#moveTo" class="headerlink" title="moveTo()"></a>moveTo()</h4><div id="moveTo"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.moveTo(x,y)</span><br></pre></td></tr></table></figure><h4 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h4><div id="open"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.open(URL,name,specs,replace)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/open0.png?raw=true" alt=""><br><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/open1.png?raw=true" alt=""></p><h4 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h4><div id="print"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.print()</span><br></pre></td></tr></table></figure><h4 id="prompt"><a href="#prompt" class="headerlink" title="prompt()"></a>prompt()</h4><div id="prompt"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt(msg,defaultText)</span><br></pre></td></tr></table></figure><h4 id="resizeBy"><a href="#resizeBy" class="headerlink" title="resizeBy()"></a>resizeBy()</h4><div id="resizeBy"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resizeBy(width,height)</span><br><span class="line">resizeBy() 方法用于根据指定的像素来调整窗口的大小。</span><br><span class="line">注意： 此方法定义指定窗口的右下角角落移动的像素，左上角将不会被移动(它停留在其原来的坐标).</span><br></pre></td></tr></table></figure><h4 id="resizeTo"><a href="#resizeTo" class="headerlink" title="resizeTo()"></a>resizeTo()</h4><div id="resizeTo"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.resizeTo(width,height)</span><br></pre></td></tr></table></figure><h4 id="scrollBy"><a href="#scrollBy" class="headerlink" title="scrollBy()"></a>scrollBy()</h4><div id="scrollBy"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrollBy(xnum,ynum)</span><br><span class="line">scrollBy() 方法可把内容滚动指定的像素数。</span><br><span class="line">注意： 要使此方法工作 window 滚动条的可见属性必须设置为true！</span><br></pre></td></tr></table></figure><br><br>|参数|说明|<br>|——|——|<br>|xnum|必需。把文档向右滚动的像素数。|<br>|ynum|必需。把文档向下滚动的像素数。|<br><br>#### scrollTo()<br><br><div id="scrollTo"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrollTo() 方法可把内容滚动到指定的坐标。</span><br><span class="line">scrollTo(xpos,ypos)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>xpos</td><td>必需。要在窗口文档显示区左上角显示的文档的 x 坐标。</td></tr><tr><td>ypos</td><td>必需。要在窗口文档显示区左上角显示的文档的 y 坐标。</td></tr></tbody></table><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h4><div id="setInterval"></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>code/function</td><td>必需。要调用一个代码串，也可以是一个函数</td></tr><tr><td>milliseconds</td><td>必须。周期性执行或调用 code/function 之间的时间间隔，以毫秒计。</td></tr><tr><td>param1, param2, …</td><td>可选。 传给执行函数的其他参数（IE9 及其更早版本不支持该参数）</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回一个 ID（数字），可以将这个ID传递给clearInterval()，clearTimeout() 以取消执行。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">setInterval(code, milliseconds);</span><br><span class="line">setInterval(function, milliseconds, param1, param2, ...)</span><br></pre></td></tr></table></figure><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h4><div id="setTimeout"></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>code/function</td><td>必需。要调用一个代码串，也可以是一个函数</td></tr><tr><td>milliseconds</td><td>可选。执行或调用 code/function 需要等待的时间，以毫秒计。默认为 0。</td></tr><tr><td>param1, param2, …</td><td>可选。 传给执行函数的其他参数（IE9 及其更早版本不支持该参数）。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回一个 ID（数字），可以将这个ID传递给 clearTimeout() 来取消执行。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">setTimeout(code, milliseconds, param1, param2, ...)</span><br><span class="line">setTimeout(function, milliseconds, param1, param2, ...)</span><br></pre></td></tr></table></figure><h1 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h1><h2 id="Navigator-对象-1"><a href="#Navigator-对象-1" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Navigator 对象包含有关浏览器的信息。</span><br><span class="line">注意： 没有应用于 navigator 对象的公开标准，不过所有浏览器都支持该对象。</span><br></pre></td></tr></table></figure><h2 id="Navigator-对象属性"><a href="#Navigator-对象属性" class="headerlink" title="Navigator 对象属性"></a>Navigator 对象属性</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>appCodeName</td><td>返回浏览器的代码名</td></tr><tr><td>appName</td><td>返回浏览器的名称</td></tr><tr><td>appVersion</td><td>返回浏览器的平台和版本信息</td></tr><tr><td>cookieEnabled</td><td>返回指明浏览器中是否启用 cookie 的布尔值</td></tr><tr><td>platform</td><td>返回运行浏览器的操作系统平台</td></tr><tr><td></td></tr><tr><td>userAgent</td><td>返回由客户机发送服务器的user-agent 头部的值</td></tr></tbody></table><h2 id="Navigator-对象方法"><a href="#Navigator-对象方法" class="headerlink" title="Navigator 对象方法"></a>Navigator 对象方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>javaEnabled()</td><td>指定是否在浏览器中启用Java</td></tr><tr><td>taintEnabled()</td><td>规定浏览器是否启用数据污点(data tainting)（目前只有IE和Opera浏览器支持）</td></tr></tbody></table><h1 id="Screen-对象"><a href="#Screen-对象" class="headerlink" title="Screen 对象"></a>Screen 对象</h1><h2 id="Screen-对象-1"><a href="#Screen-对象-1" class="headerlink" title="Screen 对象"></a>Screen 对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Screen 对象包含有关客户端显示屏幕的信息。</span><br><span class="line">注意： 没有应用于 screen 对象的公开标准，不过所有浏览器都支持该对象。</span><br></pre></td></tr></table></figure><h2 id="Screen-对象属性"><a href="#Screen-对象属性" class="headerlink" title="Screen 对象属性"></a>Screen 对象属性</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>availHeight</td><td>返回屏幕的高度（不包括Windows任务栏）</td></tr><tr><td>availWidth</td><td>返回屏幕的宽度（不包括Windows任务栏</td></tr><tr><td>colorDepth</td><td>返回目标设备或缓冲器上的调色板的比特深度</td></tr><tr><td>height</td><td>返回屏幕的总高度</td></tr><tr><td>pixelDepth</td><td>返回屏幕的颜色分辨率（每象素的位数</td></tr><tr><td>width</td><td>返回屏幕的总宽度</td></tr></tbody></table><h1 id="History-对象"><a href="#History-对象" class="headerlink" title="History 对象"></a>History 对象</h1><h2 id="History-对象-1"><a href="#History-对象-1" class="headerlink" title="History 对象"></a>History 对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">包含用户（在浏览器窗口中）访问过的 URL。</span><br><span class="line">History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问。</span><br><span class="line">注意： 没有应用于History对象的公开标准，不过所有浏览器都支持该对象。</span><br></pre></td></tr></table></figure><h2 id="History-对象属性"><a href="#History-对象属性" class="headerlink" title="History 对象属性"></a>History 对象属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>返回历史列表中的网址数</td></tr></tbody></table><h2 id="History-对象方法"><a href="#History-对象方法" class="headerlink" title="History 对象方法"></a>History 对象方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><a href="#back">back()</a></td><td>加载 history 列表中的前一个 URL</td></tr><tr><td><a href="#forward">forward()</a></td><td>加载 history 列表中的下一个 URL</td></tr><tr><td><a href="#go">go()</a></td><td>加载 history 列表中的某个具体页面</td></tr></tbody></table><h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><h4 id="back"><a href="#back" class="headerlink" title="back()"></a>back()</h4><div id="back"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">back() 方法可加载历史列表中的前一个 URL（如果存在）。</span><br><span class="line">调用该方法的效果等价于点击后退按钮或调用 history.go(-1)。</span><br><span class="line">语法</span><br><span class="line">history.back()</span><br></pre></td></tr></table></figure><h4 id="forward"><a href="#forward" class="headerlink" title="forward()"></a>forward()</h4><div id="forward"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">forward() 方法可加载历史列表中的下一个 URL。</span><br><span class="line">调用该方法的效果等价于点击前进按钮或调用 history.go(1)。</span><br><span class="line"></span><br><span class="line">语法</span><br><span class="line">history.forward()</span><br></pre></td></tr></table></figure><h4 id="go"><a href="#go" class="headerlink" title="go()"></a>go()</h4><div id="go"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go() 方法可加载历史列表中的某个具体的页面。</span><br><span class="line">该参数可以是数字，使用的是要访问的 URL 在 History 的 URL 列表中的相对位置。（-1上一个页面，1前进一个页面)。或一个字符串，字符串必须是局部或完整的URL，该函数会去匹配字符串的第一个URL。</span><br><span class="line">语法</span><br><span class="line">history.go(number|URL)</span><br></pre></td></tr></table></figure><h1 id="Location-对象"><a href="#Location-对象" class="headerlink" title="Location 对象"></a>Location 对象</h1><h2 id="Location-对象-1"><a href="#Location-对象-1" class="headerlink" title="Location 对象"></a>Location 对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Location 对象包含有关当前 URL 的信息。</span><br><span class="line">Location 对象是 window 对象的一部分，可通过 window.Location 属性对其进行访问。</span><br><span class="line">注意： 没有应用于Location对象的公开标准，不过所有浏览器都支持该对象。</span><br></pre></td></tr></table></figure><h2 id="Location-对象属性"><a href="#Location-对象属性" class="headerlink" title="Location 对象属性"></a>Location 对象属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="#hash">hash</a></td><td>返回一个URL的锚部分</td></tr><tr><td><a href="#host">host</a></td><td>返回一个URL的主机名和端口</td></tr><tr><td><a href="#hostname">hostname</a></td><td>返回URL的主机名</td></tr><tr><td><a href="#href">href</a></td><td>返回完整的URL</td></tr><tr><td><a href="#pathname">pathname</a></td><td>返回的URL路径名。</td></tr><tr><td><a href="#port">port</a></td><td>返回一个URL服务器使用的端口号</td></tr><tr><td><a href="#protocol">protocol</a></td><td>返回一个URL协议</td></tr><tr><td><a href="#search">search</a></td><td>返回一个URL的查询部分</td></tr></tbody></table><h3 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h3><div id="hash"></div><p>####hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   alert(window.location.hash);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div id="host"></div><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var ss = window.location.host;</span><br><span class="line">  console.log(ss);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div id="hostname"></div><h4 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var hostname = window.location.hostname;</span><br><span class="line">    console.log(hostname);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div id="href"></div><h4 id="href"><a href="#href" class="headerlink" title="href"></a>href</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    console.log(&apos;search&apos;+location.href);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div id="pathname"></div><h4 id="pathname"><a href="#pathname" class="headerlink" title="pathname"></a>pathname</h4><div id="port"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    console.log(&apos;search&apos;+location.pathname);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="port"><a href="#port" class="headerlink" title="port"></a>port</h4><div id="port"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    console.log(&apos;search&apos;+location.port);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><div id="search"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    console.log(&apos;search&apos;+location.search);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="protocaol"><a href="#protocaol" class="headerlink" title="protocaol"></a>protocaol</h4><div id="protocol"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   console.log(&apos;search&apos;+location.search);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Location-对象方法"><a href="#Location-对象方法" class="headerlink" title="Location 对象方法"></a>Location 对象方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><a href="#assign">assign(</a>)</td><td>载入一个新的文档</td></tr><tr><td><a href="#reload">reload()</a></td><td>重新载入当前文档</td></tr><tr><td><a href="#replace">replace()</a></td><td>用新的文档替换当前文档</td></tr></tbody></table><h3 id="应用-3"><a href="#应用-3" class="headerlink" title="应用"></a>应用</h3><h4 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h4><div id="asssign"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   window.location.assign(&apos;url&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="reload"><a href="#reload" class="headerlink" title="reload"></a>reload</h4><div id="reload"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   window.location.reload(state);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">如果把该方法的参数设置为 true，那么无论文档的最后修改日期是什么，它都会绕过缓存，从服务器上重新下载该文档。这与用户在单击浏览器的刷新按钮时按住 Shift 健的效果是完全一样。</span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><div id="replace"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   window.location.replace(&apos;url&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Window-对象&quot;&gt;&lt;a href=&quot;#Window-对象&quot; class=&quot;headerlink&quot; title=&quot;Window 对象&quot;&gt;&lt;/a&gt;Window 对象&lt;/h1&gt;&lt;h2 id=&quot;Window-对象-1&quot;&gt;&lt;a href=&quot;#Window-对象-1&quot; c
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript-Number</title>
    <link href="http://yoursite.com/2018/05/11/javascript-Number/"/>
    <id>http://yoursite.com/2018/05/11/javascript-Number/</id>
    <published>2018-05-11T01:52:26.000Z</published>
    <updated>2018-05-11T02:14:21.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Number-对象"><a href="#Number-对象" class="headerlink" title="Number 对象"></a>Number 对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Number 对象是原始数值的包装对象。</span><br><span class="line">Number 创建方式 new Number()。</span><br></pre></td></tr></table></figure><h2 id="Number-对象属性"><a href="#Number-对象属性" class="headerlink" title="Number 对象属性"></a>Number 对象属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>返回对创建此对象的 Number 函数的引用。</td></tr><tr><td>MAX_VALUE</td><td>可表示的最大的数。</td></tr><tr><td>MIN_VALUE</td><td>可表示的最小的数。</td></tr><tr><td>NEGATIVE_INFINITY</td><td>负无穷大，溢出时返回该值。</td></tr><tr><td>NaN</td><td>非数字值</td></tr><tr><td>POSITIVE_INFINITY</td><td>正无穷大，溢出时返回该值。</td></tr><tr><td>prototype</td><td>允许您有能力向对象添加属性和方法。</td></tr></tbody></table><h2 id="Number-对象方法"><a href="#Number-对象方法" class="headerlink" title="Number 对象方法"></a>Number 对象方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="#toExponential">toExponential(x)</a></td><td>把对象的值转换为指数计数法。</td></tr><tr><td><a href="#toFixed">toFixed(x)</a></td><td>把数字转换为字符串，结果的小数点后有指定位数的数字。</td></tr><tr><td><a href="#toPrecision">toPrecision(x)</a></td><td>把数字格式化为指定的长度。</td></tr><tr><td><a href="#toString">toString()</a></td><td>把数字转换为字符串，使用指定的基数。</td></tr><tr><td><a href="#valueOf">valueOf()</a></td><td>返回一个 Number 对象的基本数字值。</td></tr></tbody></table><h2 id="Number的使用"><a href="#Number的使用" class="headerlink" title="Number的使用"></a>Number的使用</h2><p><div id="toFixed"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var number = new Number(33);</span><br><span class="line">number.toFixed(3); //&quot;33.000&quot;</span><br></pre></td></tr></table></figure></p><p><div id="toPrecision"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var number = new Number(33);</span><br><span class="line">number.toPrecision(3); //&quot;33.0&quot;</span><br></pre></td></tr></table></figure></p><p><div id="toString"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var number = new Number(33);</span><br><span class="line">number.toString();</span><br></pre></td></tr></table></figure></p><p><div id="valueOf"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var number = new Number(33);</span><br><span class="line">number.valueOf();</span><br></pre></td></tr></table></figure></p><p><div id="toExponential"></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var number = new Number(33);</span><br><span class="line">number.toExponential(2);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Number-对象&quot;&gt;&lt;a href=&quot;#Number-对象&quot; class=&quot;headerlink&quot; title=&quot;Number 对象&quot;&gt;&lt;/a&gt;Number 对象&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript-RegExp</title>
    <link href="http://yoursite.com/2018/05/10/javascript-RegExp/"/>
    <id>http://yoursite.com/2018/05/10/javascript-RegExp/</id>
    <published>2018-05-10T14:06:55.000Z</published>
    <updated>2018-05-11T08:35:48.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正则表达式是描述字符模式的对象。</span><br><span class="line">正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var patt=new RegExp(pattern,modifiers);</span><br><span class="line">或者更简单的方式:</span><br><span class="line">var patt=/pattern/modifiers;</span><br></pre></td></tr></table></figure><ul><li>pattern（模式） 描述了表达式的模式</li><li>modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配</li><li>注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。比如，以下是等价的：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var re = new RegExp(&quot;\\w+&quot;);</span><br><span class="line">var re = /\w+/;</span><br></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小不敏感的匹配</td></tr><tr><td>g</td><td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</td></tr><tr><td>m</td><td>执行多行匹配</td></tr></tbody></table><h2 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h2><p>方括号用于查找某个范围内的字符</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符</td></tr><tr><td>[\^abc]</td><td>查找任何不在方括号之间的字符</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字</td></tr><tr><td>[a-z]</td><td>查找任何从小写 a 到小写 z 的字符</td></tr><tr><td>[A-Z]</td><td>查找任何从大写 A 到大写 Z 的字符</td></tr><tr><td>[A-z]</td><td>查找任何从大写 A 到小写 z 的字符</td></tr><tr><td>[adgk]</td><td>查找给定集合内的任何字符。</td></tr><tr><td>[\^adgk]</td><td>查找给定集合外的任何字符。</td></tr><tr><td>(red\</td><td>blue\</td><td>green)</td><td>查找任何指定的选项。</td></tr></tbody></table><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符（Metacharacter）是拥有特殊含义的字符：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>查找单个字符，除了换行和行结束符。</td></tr><tr><td>\w</td><td>查找单词字符。</td></tr><tr><td>\W</td><td>查找非单词字符。</td></tr><tr><td>\d</td><td>查找数字。</td></tr><tr><td>\D</td><td>查找非数字字符。</td></tr><tr><td>\s</td><td>查找空白字符。</td></tr><tr><td>\S</td><td>查找非空白字符。</td></tr><tr><td>\b</td><td>匹配单词边界。</td></tr><tr><td>\B</td><td>匹配非单词边界。</td></tr><tr><td>\0</td><td>查找 NULL 字符。</td></tr><tr><td>\n</td><td>查找换行符。</td></tr><tr><td>\f</td><td>查找换页符</td></tr><tr><td>\r</td><td>查找回车符。</td></tr><tr><td>\t</td><td>查找制表符。</td></tr><tr><td>\v</td><td>查找垂直制表符。</td></tr><tr><td>\xxx</td><td>查找以八进制数 xxx 规定的字符。</td></tr><tr><td>\xdd</td><td>查找以十六进制数 dd 规定的字符。</td></tr><tr><td>\uxxxx</td><td>查找以十六进制数 xxxx 规定的 Unicode 字符</td></tr></tbody></table><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>匹配任何包含至少一个 n 的字符串。例如，/a+/ 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</td></tr><tr><td>n*</td><td>匹配任何包含零个或多个 n 的字符串。例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</td></tr><tr><td>n?</td><td>匹配任何包含零个或一个 n 的字符串。例如，/e?le?/ 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</td></tr><tr><td>n{X}</td><td>匹配包含 X 个 n 的序列的字符串。例如，/a{2}/ 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</td></tr><tr><td>n{X,}</td><td>X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。例如，/a{2,}/ 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</td></tr><tr><td>n{X,Y}</td><td>X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。例如，/a{1,3}/ 不匹配 “cndy”，匹配 “candy,” 的”a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</td></tr><tr><td>n$</td><td>匹配任何结尾为 n 的字符串。</td></tr><tr><td>^n</td><td>匹配任何开头为 n 的字符串。</td></tr><tr><td>?=n</td><td>匹配任何其后紧接指定字符串 n 的字符串。</td></tr><tr><td>?!n</td><td>匹配任何其后没有紧接指定字符串 n 的字符串</td></tr></tbody></table><h2 id="Regex对象方法"><a href="#Regex对象方法" class="headerlink" title="Regex对象方法"></a>Regex对象方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>compile</td><td>在 1.5 版本中已废弃。 编译正则表达式。</td></tr><tr><td>exec</td><td>检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td>test</td><td>检索字符串中指定的值。返回 true 或 false。</td></tr><tr><td>toString</td><td>返回正则表达式的字符串。</td></tr></tbody></table><h2 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>search</td><td>检索与正则表达式相匹配的值。</td></tr><tr><td>match</td><td>找到一个或多个正则表达式的匹配。</td></tr><tr><td>replace</td><td>替换与正则表达式匹配的子串。</td></tr><tr><td>split</td><td>把字符串分割为字符串数组。</td></tr></tbody></table><h2 id="RegExp-对象属性"><a href="#RegExp-对象属性" class="headerlink" title="RegExp 对象属性"></a>RegExp 对象属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>返回一个函数，该函数是一个创建RegExp 对象的原型。</td></tr><tr><td>global</td><td>判断是否设置了 “g” 修饰符</td></tr><tr><td>ignoreCase</td><td>判断是否设置了 “i” 修饰符</td></tr><tr><td>lastIndex</td><td>用于规定下次匹配的起始位置</td></tr><tr><td>multiline</td><td>判断是否设置了 “m” 修饰符</td></tr><tr><td>multiline</td><td>返回正则表达式的匹配模式</td></tr></tbody></table><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;h2 id=&quot;RegExp-对象&quot;&gt;&lt;a href=&quot;#RegExp-对象&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript-Math</title>
    <link href="http://yoursite.com/2018/05/10/javascript-Math/"/>
    <id>http://yoursite.com/2018/05/10/javascript-Math/</id>
    <published>2018-05-10T14:06:33.000Z</published>
    <updated>2018-05-11T01:51:59.591Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math（算数）对象的作用是：执行常见的算数任务。</span><br></pre></td></tr></table></figure><h2 id="Math-对象属性"><a href="#Math-对象属性" class="headerlink" title="Math 对象属性"></a>Math 对象属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>E</td><td>返回算术常量 e，即自然对数的底数（约等于2.718）。</td></tr><tr><td>LN2</td><td>返回 2 的自然对数（约等于0.693）。</td></tr><tr><td>LN10</td><td>返回 10 的自然对数（约等于2.302）</td></tr><tr><td>LOG2E</td><td>返回以 2 为底的 e 的对数（约等于 1.414）</td></tr><tr><td>LOG10E</td><td>返回以 10 为底的 e 的对数（约等于0.434）</td></tr><tr><td>PI</td><td>返回圆周率（约等于3.14159）。</td></tr><tr><td>SQRT1_2</td><td>返回返回 2 的平方根的倒数（约等于 0.707）。</td></tr><tr><td>SQRT2</td><td>返回 2 的平方根（约等于 1.414）。</td></tr></tbody></table><h2 id="Math-对象方法"><a href="#Math-对象方法" class="headerlink" title="Math 对象方法"></a>Math 对象方法</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>round(x)</td><td>把数四舍五入为最接近的整数。</td></tr><tr><td>random()</td><td>返回 0 ~ 1 之间的随机数。</td></tr><tr><td>max(x,y,z,…,n)</td><td>返回 x,y,z,…,n 中的最高值</td></tr><tr><td>min(x,y,z,…,n)</td><td>返回 x,y,z,…,n中的最低值</td></tr><tr><td>abs(x)</td><td>返回 x 的绝对值。</td></tr><tr><td>acos(x)</td><td>返回 x 的反余弦值。</td></tr><tr><td>asin(x)</td><td>返回 x 的反正弦值。</td></tr><tr><td>atan(x)</td><td>以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。</td></tr><tr><td>atan2(y,x)</td><td>返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）</td></tr><tr><td>ceil(x)</td><td>对数进行上舍入。</td></tr><tr><td>cos(x)</td><td>返回数的余弦。</td></tr><tr><td>exp(x)</td><td>返回 E^x 的指数。</td></tr><tr><td>floor(x)</td><td>对 x 进行下舍入。</td></tr><tr><td>log(x)</td><td>返回数的自然对数（底为e）</td></tr><tr><td>pow(x,y)</td><td>返回 x 的 y 次幂。</td></tr><tr><td>sin(x)</td><td>返回数的正弦。</td></tr><tr><td>sqrt(x)</td><td>返回数的平方根。</td></tr><tr><td>tan(x)</td><td>返回角的正切。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript-String</title>
    <link href="http://yoursite.com/2018/05/10/javascript-String/"/>
    <id>http://yoursite.com/2018/05/10/javascript-String/</id>
    <published>2018-05-10T14:06:23.000Z</published>
    <updated>2018-05-11T06:33:11.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String 对象用于处理文本（字符串）。</span><br><span class="line">String 对象创建方法： new String().</span><br></pre></td></tr></table></figure><h2 id="String-对象属性"><a href="#String-对象属性" class="headerlink" title="String 对象属性"></a>String 对象属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>对创建该对象的函数的引用</td></tr><tr><td>length</td><td>字符串的长度</td></tr><tr><td>prototype</td><td>允许您向对象添加属性和方法</td></tr></tbody></table><h2 id="String-对象方法"><a href="#String-对象方法" class="headerlink" title="String 对象方法"></a>String 对象方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="#charAt">charAt()</a></td><td>返回在指定位置的字符。</td></tr><tr><td><a href="#charCodeAt">charCodeAt()</a></td><td>返回在指定的位置的字符的 Unicode 编码。</td></tr><tr><td><a href="#concat">concat()</a></td><td>连接两个或更多字符串，并返回新的字符串。</td></tr><tr><td><a href="#fromCharCode">fromCharCode()</a></td><td>将 Unicode 编码转为字符。</td></tr><tr><td><a href="#indexOf">indexOf()</a></td><td>返回某个指定的字符串值在字符串中首次出现的位置</td></tr><tr><td><a href="#lastIndexOf">lastIndexOf()</a></td><td>从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置</td></tr><tr><td><a href="#match">match()</a></td><td>查找找到一个或多个正则表达式的匹配。</td></tr><tr><td><a href="#replace">replace()</a></td><td>在字符串中查找匹配的子串， 并替换与正则表达式匹配的子串。</td></tr><tr><td><a href="#search">search()</a></td><td>查找与正则表达式相匹配的值。</td></tr><tr><td><a href="#slice">slice()</a></td><td>提取字符串的片断，并在新的字符串中返回被提取的部分。</td></tr><tr><td></td></tr><tr><td><a href="#split">split()</a></td><td>把字符串分割为字符串数组。</td></tr><tr><td><a href="#substr">substr()</a></td><td>从起始索引号提取字符串中指定数目的字符。</td></tr><tr><td><a href="#substring">substring()</a></td><td>提取字符串中两个指定的索引号之间的字符。</td></tr><tr><td><a href="#toLowerCase">toLowerCase()</a></td><td>把字符串转换为小写。</td></tr><tr><td></td></tr><tr><td><a href="#toUpperCase">toUpperCase()</a></td><td>把字符串转换为大写。</td></tr><tr><td><a href="#trim">trim()</a></td><td>去除字符串两边的空白</td></tr><tr><td><a href="#valueOf">valueOf()</a></td><td>返回某个字符串对象的原始值。</td></tr></tbody></table><h2 id="String-HTML-包装方法"><a href="#String-HTML-包装方法" class="headerlink" title="String HTML 包装方法"></a>String HTML 包装方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="#anchor">anchor()</a></td><td>创建 HTML 锚。</td></tr><tr><td><a href="#big">big()</a></td><td>用大号字体显示字符串。</td></tr><tr><td><a href="#blink">blink()</a></td><td>显示闪动字符串。</td></tr><tr><td><a href="#bold">bold()</a></td><td>使用粗体显示字符串。</td></tr><tr><td><a href="#fixed">fixed()</a></td><td>以打字机文本显示字符串</td></tr><tr><td><a href="#fontcolor">fontcolor()</a></td><td>使用指定的颜色来显示字符串。</td></tr><tr><td><a href="#fontsize">fontsize()</a></td><td>使用指定的尺寸来显示字符串。</td></tr><tr><td><a href="#italics">italics()</a></td><td>使用斜体显示字符串。</td></tr><tr><td><a href="#link">link()</a></td><td>将字符串显示为链接。</td></tr><tr><td><a href="#small">small()</a></td><td>使用小字号来显示字符串。</td></tr><tr><td><a href="#strike">strike()</a></td><td>用于显示加删除线的字符串</td></tr><tr><td><a href="#sub">sub()</a></td><td>把字符串显示为下标。</td></tr><tr><td><a href="#sup">sup()</a></td><td>把字符串显示为上标。</td></tr></tbody></table><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h3><div id="charAt"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;abc&apos;;</span><br><span class="line">console.log(str.charAt(0));</span><br><span class="line">注意点 ：位置必须介于[0,str.length) 之间。</span><br></pre></td></tr></table></figure><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt"></a>charCodeAt</h3><div id="charCodeAt"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;abc&apos;;</span><br><span class="line">console.log(str.charCodeAt(0));</span><br><span class="line">注意点 ：位置必须介于[0,str.length) 之间。超过结果：NAN</span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><div id="concat"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">函数原型 contact(string1,string2,......);</span><br><span class="line">var string1 = &apos;you are&apos;;</span><br><span class="line">var string2 = &apos;good&apos;;</span><br><span class="line">var string3 = &apos;student&apos;;</span><br><span class="line">var ss = string1.concat(string2,string3);</span><br><span class="line">console.log(ss);</span><br><span class="line">输出结果： you aregoodstudent</span><br><span class="line">注意：产生新数组，不会改变原有的字符串。</span><br></pre></td></tr></table></figure><h3 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode"></a>fromCharCode</h3><div id="fromCharCode"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(97)</span><br><span class="line">//输出结果 “a”；</span><br></pre></td></tr></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><div id="indexOf"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var string = &apos;youuuu&apos;;</span><br><span class="line">var index = string.indexOf(&apos;u&apos;);</span><br><span class="line">index 代表第一次出现&apos;u&apos;的索引值。</span><br></pre></td></tr></table></figure><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><div id="lastIndexOf"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var string = &apos;youuuu&apos;;</span><br><span class="line">var index = string.lastIndexOf(&apos;u&apos;);</span><br><span class="line">index 代表最后出现&apos;u&apos;的索引值。</span><br></pre></td></tr></table></figure><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><div id="match"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var string = &apos;The rain in SPAIN stays mainly in the plain&apos;;</span><br><span class="line">string.match(\you\g);</span><br><span class="line">输出  [&quot;ain&quot;, &quot;ain&quot;, &quot;ain&quot;]</span><br><span class="line">返回结果 数组</span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><div id="replace"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法 string.replace(searchvalue,newvalue);</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>searchvalue</td><td>必须。规定子字符串或要替换的模式的 RegExp 对象。请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</td></tr><tr><td>newvalue</td><td>必需。一个字符串值。规定了替换文本或生成替换文本的函数。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;Mr Blue has a blue house and a blue car&quot;;</span><br><span class="line">var n=str.replace(/blue/g,&quot;red&quot;);</span><br><span class="line">结果：Mr Blue has a red house and a red car</span><br><span class="line">注意点：产生一个新的数组</span><br></pre></td></tr></table></figure><div id="search"></div><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.search(searchvalue)</span><br></pre></td></tr></table></figure><p>参数值</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>searchvalue</td><td>必须。查找的字符串或者正则表达式。</td></tr></tbody></table><p>返回值</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Number</td><td>与指定查找的字符串或者正则表达式相匹配的 String 对象起始位置。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;Mr. Blue has a blue house&quot;;</span><br><span class="line">var n = str.search(&apos;blue&apos;);</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><div id="slice"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.slice(start,end)</span><br></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>必须. 要抽取的片断的起始下标。第一个字符位置为 0</td></tr><tr><td>end</td><td>可选。 紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</td></tr></tbody></table><p>返回值</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>提取的字符串</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;Hello world!&quot;;</span><br><span class="line">var n=str.slice(0);</span><br><span class="line">结果：Hello world!</span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><div id="split"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.split(separator,limit)</span><br></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>separator</td><td>可选。字符串或正则表达式，从该参数指定的地方分割 string Object。</td></tr><tr><td>limit</td><td>可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</td></tr></tbody></table><p>返回值</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Array</td><td>一个字符串数组。该数组是通过在separator指定的边界处将字符串 string Object 分割成子串创建的。返回的数组中的字串不包括 separator 自身。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;How are you doing today?&quot;;</span><br><span class="line">var n=str.split();</span><br><span class="line">[How are you doing today?&quot;]</span><br></pre></td></tr></table></figure><h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><div id="substr"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.substr(start,length)</span><br></pre></td></tr></table></figure><p>参数值</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。</td></tr><tr><td>length</td><td>可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。</td></tr></tbody></table><p>返回值</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>A new string containing the extracted part of the text</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;Hello world!&quot;;</span><br><span class="line">var n=str.substr(2)</span><br><span class="line">结果：llo world!</span><br></pre></td></tr></table></figure><h3 id="substring-方法返回的子串包括-开始-处的字符，但不包括-结束-处的字符。"><a href="#substring-方法返回的子串包括-开始-处的字符，但不包括-结束-处的字符。" class="headerlink" title="substring() 方法返回的子串包括 开始 处的字符，但不包括 结束 处的字符。"></a>substring() 方法返回的子串包括 开始 处的字符，但不包括 结束 处的字符。</h3><div id="substring"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.substring(from, to)</span><br></pre></td></tr></table></figure><p>参数值</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>from</td><td>必需。一个非负的整数，规定要提取的子串的第一个字符在 string Object 中的位置。</td></tr><tr><td>to</td><td>可选。一个非负的整数，比要提取的子串的最后一个字符在 string Object 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。</td></tr></tbody></table><p>返回值</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>子串</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;Hello world!&quot;</span><br><span class="line">str.substring(0);</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><div id="anchor"></div><h3 id="创建锚点-anchor"><a href="#创建锚点-anchor" class="headerlink" title="创建锚点 anchor"></a>创建锚点 anchor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var txt = &quot;Chapter 10&quot;;</span><br><span class="line">   txt.anchor(&quot;chap10&quot;);</span><br><span class="line">   alert(txt.anchor(&quot;chap10&quot;));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div id="big"></div><h3 id="big"><a href="#big" class="headerlink" title="big()"></a>big()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.big());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div id="blink"></div><h3 id="blink-目前只有Firefox-和-Opera-浏览器支持"><a href="#blink-目前只有Firefox-和-Opera-浏览器支持" class="headerlink" title="blink() 目前只有Firefox 和 Opera 浏览器支持"></a>blink() 目前只有Firefox 和 Opera 浏览器支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.blink());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div id="bold"></div><h3 id="bold-显示粗体"><a href="#bold-显示粗体" class="headerlink" title="bold 显示粗体"></a>bold 显示粗体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.bold());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div id="fixed"></div></p><h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed()"></a>fixed()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.fixed());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div id="fontcolor"></div></p><h3 id="fontcolor"><a href="#fontcolor" class="headerlink" title="fontcolor()"></a>fontcolor()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">  document.write(str.fontcolor(&quot;green&quot;));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div id="fontsize"></div></p><h3 id="fontsize"><a href="#fontsize" class="headerlink" title="fontsize()"></a>fontsize()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.fontsize(7));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div id="italics"></div></p><h3 id="italics"><a href="#italics" class="headerlink" title="italics"></a>italics</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.italics());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div id="link"></div></p><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Free Web Building Tutorials!&quot;;</span><br><span class="line">   document.write(str.link(&quot;http://www.w3cschool.cc&quot;));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div id="small"></div></p><h3 id="samll"><a href="#samll" class="headerlink" title="samll"></a>samll</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.small());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div id="strike"></div></p><h3 id="strike"><a href="#strike" class="headerlink" title="strike()"></a>strike()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.strike());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div id="sub"></div></p><h3 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.sub());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><div id="sup"></div></p><h3 id="sup"><a href="#sup" class="headerlink" title="sup()"></a>sup()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var str = &quot;Hello world!&quot;;</span><br><span class="line">   document.write(str.sup());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;String-对象&quot;&gt;&lt;a href=&quot;#String-对象&quot; class=&quot;headerlink&quot; title=&quot;String 对象&quot;&gt;&lt;/a&gt;String 对象&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript-Date</title>
    <link href="http://yoursite.com/2018/05/10/javascript-Date/"/>
    <id>http://yoursite.com/2018/05/10/javascript-Date/</id>
    <published>2018-05-10T13:30:18.000Z</published>
    <updated>2018-05-10T13:55:48.634Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript-Date-对象"><a href="#JavaScript-Date-对象" class="headerlink" title="JavaScript Date 对象"></a>JavaScript Date 对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date 对象</span><br><span class="line">Date 对象用于处理日期与时间。</span><br><span class="line">创建 Date 对象： new Date()</span><br><span class="line">以下四种方法同样可以创建 Date 对象：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">var d = new Date(milliseconds);</span><br><span class="line">var d = new Date(dateString);</span><br><span class="line">var d = new Date(year, month, day, hours, minutes, seconds, milliseconds);</span><br></pre></td></tr></table></figure><h4 id="Date-对象属性"><a href="#Date-对象属性" class="headerlink" title="Date 对象属性"></a>Date 对象属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>返回对创建此对象的 Date 函数的引用。</td></tr><tr><td>prototype</td><td>使您有能力向对象添加属性和方法。</td></tr></tbody></table><h4 id="Date-对象方法"><a href="#Date-对象方法" class="headerlink" title="Date 对象方法"></a>Date 对象方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getDate()</td><td>从 Date 对象返回一个月中的某一天(1 ~ 31)。</td></tr><tr><td>getDay()</td><td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td></tr><tr><td>getFullYear()</td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td>getMilliseconds()</td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td>getMonth()</td><td>从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td>getTime()</td><td>返回 1970 年 1 月 1 日至今的毫秒数。</td></tr><tr><td>getTimezoneOffset()</td><td>返回本地时间与格林威治标准时间 (GMT) 的分钟差。</td></tr><tr><td>getUTCDate()</td><td>根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。</td></tr><tr><td>getUTCDay()</td><td>根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。</td></tr><tr><td>getUTCFullYear()</td><td>根据世界时从 Date 对象返回四位数的年份。</td></tr><tr><td>getUTCHours()</td><td>根据世界时返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td>getUTCMilliseconds()</td><td>根据世界时返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td>getUTCMinutes()</td><td>根据世界时返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td>getUTCMonth()</td><td>根据世界时从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td>getUTCSeconds()</td><td>根据世界时返回 Date 对象的秒钟 (0 ~ 59)。</td></tr><tr><td>getYear()</td><td>已废弃。 请使用 getFullYear() 方法代替。</td></tr><tr><td>parse()</td><td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td></tr><tr><td>setDate()</td><td>设置 Date 对象中月的某一天 (1 ~ 31)。</td></tr><tr><td>setFullYear()</td><td>设置 Date 对象中的年份（四位数字）。</td></tr><tr><td>setHours()</td><td>设置 Date 对象中的小时 (0 ~ 23)。</td></tr><tr><td>setMilliseconds()</td><td>设置 Date 对象中的毫秒 (0 ~ 999)</td></tr><tr><td>setMinutes()</td><td>设置 Date 对象中的分钟 (0 ~ 59)。</td></tr><tr><td>setMonth()</td><td>设置 Date 对象中月份 (0 ~ 11)。</td></tr><tr><td>setSeconds()</td><td>设置 Date 对象中的秒钟 (0 ~ 59)。</td></tr><tr><td>setTime()</td><td>setTime() 方法以毫秒设置 Date 对象</td></tr><tr><td>setUTCDate()</td><td>根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。</td></tr><tr><td>setUTCFullYear()</td><td>setUTCFullYear()</td></tr></tbody></table><p>根据世界时设置 Date 对象中的年份（四位数字）。|<br>|setUTCHours()|根据世界时设置 Date 对象中的小时 (0 ~ 23)。|<br>|setUTCMilliseconds()|根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。|<br>|setUTCMinutes()|根据世界时设置 Date 对象中的分钟 (0 ~ 59)。|<br>|setUTCMonth()|根据世界时设置 Date 对象中的月份 (0 ~ 11)。|<br>|setUTCSeconds()|setUTCSeconds() 方法用于根据世界时 (UTC) 设置指定时间的秒字段。|<br>|setYear()|已废弃。请使用 setFullYear() 方法代替。|<br>|toDateString()|把 Date 对象的日期部分转换为字符串。|<br>|toGMTString()|已废弃。请使用 toUTCString() 方法代替。|<br>|toISOString()|使用 ISO 标准返回字符串的日期格式。|<br>|toJSON()|以 JSON 数据格式返回日期字符串。|<br>|toLocaleDateString()|根据本地时间格式，把 Date 对象的日期部分转换为字符串。|<br>|toLocaleTimeString()|根据本地时间格式，把 Date 对象的时间部分转换为字符串。|<br>|toLocaleString()|据本地时间格式，把 Date 对象转换为字符串。|<br>|toString()|把 Date 对象转换为字符串。|<br>|toTimeString()|把 Date 对象的时间部分转换为字符串。|<br>|toUTCString()|根据世界时，把 Date 对象转换为字符串。|<br>|UTC()|根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。|<br>|valueOf()|返回 Date 对象的原始值。|</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JavaScript-Date-对象&quot;&gt;&lt;a href=&quot;#JavaScript-Date-对象&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Date 对象&quot;&gt;&lt;/a&gt;JavaScript Date 对象&lt;/h3&gt;&lt;figure c
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript-1</title>
    <link href="http://yoursite.com/2018/05/10/javascript-1/"/>
    <id>http://yoursite.com/2018/05/10/javascript-1/</id>
    <published>2018-05-10T05:49:24.000Z</published>
    <updated>2018-05-10T13:26:23.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var array = new Array();</span><br><span class="line">array.push(1);</span><br><span class="line">array.push(&apos;c&apos;);</span><br><span class="line"></span><br><span class="line">var array = new Array(size);</span><br><span class="line"></span><br><span class="line">var array = new Array(1,2);</span><br></pre></td></tr></table></figure><h3 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var array = new Array();</span><br><span class="line">array.push(1);</span><br><span class="line">array.push(&apos;c&apos;);</span><br><span class="line">array[0] = &apos;ffd&apos;;</span><br></pre></td></tr></table></figure><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var length = array.length;</span><br></pre></td></tr></table></figure><h3 id="数组查值"><a href="#数组查值" class="headerlink" title="数组查值"></a>数组查值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var index = array.indexOf(&apos;Volvo&apos;);</span><br><span class="line">index 表示 ‘Volvo’ 在数组中的索引值，-1 表示不存在</span><br></pre></td></tr></table></figure><h3 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">连接两个或者多个数组</span><br><span class="line">var arr = [2,3]</span><br><span class="line">var arr1 = [3];</span><br><span class="line">arr.contact(arr1) 产生新数组</span><br><span class="line">[2,3,3]</span><br></pre></td></tr></table></figure><h3 id="数组复制"><a href="#数组复制" class="headerlink" title="数组复制"></a>数组复制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copyWithin() 方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中修改数组</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型 array.copyWithin(target, start, end)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td></td><td>target</td><td>必需。复制到指定目标索引位置。</td><td></td></tr><tr><td></td><td>start</td><td>可选。元素复制的起始位置。</td><td></td></tr><tr><td></td><td>end</td><td>可选。停止复制的索引位置 (默认为 array.length)</td><td></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">array.copyWithin(3,0,2);</span><br><span class="line">[1, 2, 3, 1, 2, 6, 7, 8, 9, 10]</span><br><span class="line">array.copyWithin(3,2,2);</span><br><span class="line">[1, 2, 3, 1, 2, 6, 7, 8, 9, 10]</span><br></pre></td></tr></table></figure><p>返回值<br>|Type|描述|<br>|——|——-|<br>|Array|数组|</p><h3 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。</span><br><span class="line">注意: forEach() 对于空数组是不会执行回调函数的。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型 array.forEach(function(currentValue, index, arr), thisValue)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/array_every.png?raw=true" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var array = new Array(11, 22, 33, 44, 55, 66);</span><br><span class="line">  array.forEach(function(value, index, array) &#123;</span><br><span class="line">      console.log(value);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="isArray-判断是否是数组"><a href="#isArray-判断是否是数组" class="headerlink" title="isArray 判断是否是数组"></a>isArray 判断是否是数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array.isArray(&apos;ss&apos;); 返回 false</span><br><span class="line">Array.isArray([]); 返回 true</span><br></pre></td></tr></table></figure><h3 id="join-把数组所有的元素放到一个字符串中"><a href="#join-把数组所有的元素放到一个字符串中" class="headerlink" title="join 把数组所有的元素放到一个字符串中"></a>join 把数组所有的元素放到一个字符串中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2].join() 结果 &quot;1,2&quot;</span><br></pre></td></tr></table></figure><h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keys() 方法用于从数组创建一个包含数组键的可迭代对象。</span><br><span class="line">如果对象是数组返回 true，否则返回 false。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型 array.keys()</span><br></pre></td></tr></table></figure><p>返回值</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>ArrayItreator</td><td>数组迭代对象</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var array = [3,4,5,6];</span><br><span class="line">array.keys();</span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse() 方法用于颠倒数组中元素的顺序。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数声明 array.reverse()</span><br></pre></td></tr></table></figure><p>返回值<br>|类型|描述|<br>|——|———-|<br>|Array|颠倒顺序后的数组|</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var array = new Array(1,2);</span><br><span class="line">array.revese();</span><br></pre></td></tr></table></figure><h3 id="includes-includes-方法用来判断一个数组是否包含一个指定的值，如果是返回-true，否则false。"><a href="#includes-includes-方法用来判断一个数组是否包含一个指定的值，如果是返回-true，否则false。" class="headerlink" title="includes includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。"></a>includes includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型 arr.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>searchElement</td><td>必须。需要查找的元素值。</td></tr><tr><td>fromIndex</td><td>可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</td></tr><tr><td>返回值</td><td>true或者false</td></tr></tbody></table><h3 id="find-查找"><a href="#find-查找" class="headerlink" title="find 查找"></a>find 查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型 array.find(function(currentValue, index, arr),thisValue)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/array_every.png&amp;raw=true" alt=""></p><table><thead><tr><th></th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>返回值</td><td>数组</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var array = [3,3,4,5,6]</span><br><span class="line">function check(age)&#123;</span><br><span class="line">    age&gt;4;</span><br><span class="line">&#125;</span><br><span class="line">array.find(check);</span><br></pre></td></tr></table></figure><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</span><br><span class="line">findIndex() 方法为数组中的每个元素都调用一次函数执行：</span><br><span class="line">当数组中的元素在测试条件时返回 true 时, findIndex() 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。</span><br><span class="line">如果没有符合条件的元素返回 -1</span><br><span class="line">注意: findIndex() 对于空数组，函数是不会执行的。</span><br><span class="line">注意: findIndex() 并没有改变数组的原始值。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型</span><br></pre></td></tr></table></figure><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/array_every.png&amp;raw=true" alt="">;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var ages = [3, 10, 18, 20];</span><br><span class="line"> </span><br><span class="line">function checkAdult(age) &#123;</span><br><span class="line">    return age &gt;= 18;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML = ages.findIndex(checkAdult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>返回值</td><td>新数组</td></tr></tbody></table><h3 id="slice-数组截取"><a href="#slice-数组截取" class="headerlink" title="slice 数组截取"></a>slice 数组截取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slice() 方法可从已有的数组中返回选定的元素。</span><br><span class="line">slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型 array.slice(start, end)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>可选。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td></tr><tr><td>end</td><td>可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td></tr></tbody></table><p>返回值</p><table><thead><tr><th>Type</th><th>描述</th></tr></thead><tbody><tr><td>Array</td><td>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">var myBest = fruits.slice(-3,-1);</span><br><span class="line">Lemon,Apple</span><br></pre></td></tr></table></figure><h3 id="some-检测数组元素中是否有元素符合指定条件。"><a href="#some-检测数组元素中是否有元素符合指定条件。" class="headerlink" title="some() 检测数组元素中是否有元素符合指定条件。"></a>some() 检测数组元素中是否有元素符合指定条件。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</span><br><span class="line">some() 方法会依次执行数组的每个元素：</span><br><span class="line">如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</span><br><span class="line">如果没有满足条件的元素，则返回false。</span><br><span class="line">注意： some() 不会对空数组进行检测。</span><br><span class="line">注意： some() 不会改变原始数组。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">array.some(function(currentValue,index,arr),thisValue)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/array_every.png?raw=true" alt=""></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>返回值</td><td>bool类型</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var ages = [4, 12, 16, 20];</span><br><span class="line"></span><br><span class="line">function checkAdult(age) &#123;</span><br><span class="line">    return age &gt;=0;</span><br><span class="line">&#125;</span><br><span class="line">ages.som(checkAdult)</span><br></pre></td></tr></table></figure><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort 排序"></a>sort 排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数原型: array.sort(sortfunction)</span><br><span class="line">1.原数组上进行排序 不产生副本</span><br><span class="line">2.默认排序顺序为按字母升序。</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td></td><td>sortfunction</td><td>可选。规定排序顺序。必须是函数。</td></tr><tr><td></td><td>返回值</td><td>对数组的引用。请注意，数组在原数组上进行排序，不生成副本。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,2,3,4,-1,3,4];</span><br><span class="line">array.sort();</span><br><span class="line">[-1, 1, 2, 3, 3, 4, 4]</span><br><span class="line"></span><br><span class="line">function check(value1,value2)&#123;</span><br><span class="line">    return value1&lt;value2;</span><br><span class="line">&#125;</span><br><span class="line">array.sort(check); //降序排列</span><br></pre></td></tr></table></figure><h3 id="从数组中添加或删除元素。"><a href="#从数组中添加或删除元素。" class="headerlink" title="从数组中添加或删除元素。"></a>从数组中添加或删除元素。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">splice() 方法用于插入、删除或替换数组的元素。</span><br><span class="line">注意：这种方法会改变原始数组！。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数声明 array.splice(index,howmany,item1,.....,itemX)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>必需。规定从何处添加/删除元素。该参数是开始插入和（或）删除的数组元素的下标，必须是数字</td></tr><tr><td>howmany</td><td>必需。规定应该删除多少元素。必须是数字，但可以是 “0”。如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</td></tr><tr><td>item1, …, itemX</td><td>可选。要添加到数组的新元素</td></tr></tbody></table><p>返回值</p><table><thead><tr><th>Type</th><th>描述</th></tr></thead><tbody><tr><td>Array</td><td>如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。</td></tr></tbody></table><h3 id="toString-把数组转换为字符串，并返回结果。"><a href="#toString-把数组转换为字符串，并返回结果。" class="headerlink" title="toString() 把数组转换为字符串，并返回结果。"></a>toString() 把数组转换为字符串，并返回结果。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toString() 方法可把数组转换为字符串，并返回结果。</span><br><span class="line">注意： 数组中的元素之间用逗号分隔。</span><br></pre></td></tr></table></figure><h3 id="unshift-向数组的开头添加一个或更多元素，并返回新的长度。"><a href="#unshift-向数组的开头添加一个或更多元素，并返回新的长度。" class="headerlink" title="unshift() 向数组的开头添加一个或更多元素，并返回新的长度。"></a>unshift() 向数组的开头添加一个或更多元素，并返回新的长度。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</span><br><span class="line">注意： 该方法将改变数组的数目。</span><br><span class="line">提示: 将新项添加到数组末尾，请使用 push() 方法。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型 array.unshift(item1,item2, ..., itemX)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>item1,item2, …, itemX</td><td>可选。向数组起始位置添加一个或者多个元素</td></tr></tbody></table><h3 id="valueOf-返回数组对象的原始值。"><a href="#valueOf-返回数组对象的原始值。" class="headerlink" title="valueOf() 返回数组对象的原始值。"></a>valueOf() 返回数组对象的原始值。</h3><h3 id="pop-删除最后的一个元素并返回删除的元素"><a href="#pop-删除最后的一个元素并返回删除的元素" class="headerlink" title="pop() 删除最后的一个元素并返回删除的元素"></a>pop() 删除最后的一个元素并返回删除的元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop() 方法用于删除数组的最后一个元素并返回删除的元素。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型  array.pop()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var array = [2,3,4,5,6];</span><br><span class="line">array.pop();</span><br></pre></td></tr></table></figure><h3 id="lastIndexOf-返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。"><a href="#lastIndexOf-返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。" class="headerlink" title="lastIndexOf() 返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。"></a>lastIndexOf() 返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lastIndexOf() 方法可返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。</span><br><span class="line">如果要检索的字符串值没有出现，则该方法返回 -1。</span><br><span class="line">该方法将从尾到头地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的结尾（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一个字符在 stringObject 中的位置。stringObject 中的字符位置是从 0 开始的。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数声明 array.lastIndexOf(item,start)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>item</td><td>必需。规定需检索的字符串值。</td></tr><tr><td>start</td><td>可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的最后一个字符处开始检索。</td></tr><tr><td>返回值</td><td>Number 如果在 stringObject 中的 fromindex 位置之前存在 searchvalue，则返回的是出现的最后一个 searchvalue 的位置。</td></tr></tbody></table><h3 id="map-通过指定函数处理数组的每个元素，并返回处理后的数组。"><a href="#map-通过指定函数处理数组的每个元素，并返回处理后的数组。" class="headerlink" title="map  通过指定函数处理数组的每个元素，并返回处理后的数组。"></a>map  通过指定函数处理数组的每个元素，并返回处理后的数组。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span><br><span class="line">map() 方法按照原始数组元素顺序依次处理元素。</span><br><span class="line">注意： map() 不会对空数组进行检测。</span><br><span class="line">注意： map() 不会改变原始数组。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型：array.map(function(currentValue,index,arr), thisValue)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/array_every.png?raw=true" alt=""></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>返回值</td><td>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var numbers = [4, 9, 16, 25];</span><br><span class="line">var x = [4, 9, 16, 25];</span><br></pre></td></tr></table></figure><h3 id="reduce-将数组元素计算为一个值（从左到右）"><a href="#reduce-将数组元素计算为一个值（从左到右）" class="headerlink" title="reduce() 将数组元素计算为一个值（从左到右）"></a>reduce() 将数组元素计算为一个值（从左到右）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span><br><span class="line">reduce() 可以作为一个高阶函数，用于函数的 compose。</span><br><span class="line">注意: reduce() 对于空数组是不会执行回调函数的。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法 array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/array_reduce.png?raw=true" alt=""></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>返回值</td><td>返回计算结果</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var numbers = [15.5, 2.3, 1.1, 4.7];</span><br><span class="line"> function getSum(total, num) &#123;</span><br><span class="line">    return total + Math.round(num);</span><br><span class="line">&#125;</span><br><span class="line">numbers.reduce(getSum, 0);</span><br></pre></td></tr></table></figure><h3 id="reduceRight-将数组元素计算为一个值（从右到左）。"><a href="#reduceRight-将数组元素计算为一个值（从右到左）。" class="headerlink" title="reduceRight() 将数组元素计算为一个值（从右到左）。"></a>reduceRight() 将数组元素计算为一个值（从右到左）。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同上</span><br></pre></td></tr></table></figure><h3 id="shift-删除并返回数组的第一个元素。"><a href="#shift-删除并返回数组的第一个元素。" class="headerlink" title="shift() 删除并返回数组的第一个元素。"></a>shift() 删除并返回数组的第一个元素。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法:array.shift()</span><br></pre></td></tr></table></figure><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>返回值</td><td>数组原来的第一个元素的值（移除的元素）。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">fruits.shift();</span><br></pre></td></tr></table></figure><h3 id="fill-填充数组"><a href="#fill-填充数组" class="headerlink" title="fill 填充数组"></a>fill 填充数组</h3><p>函数原型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.fill(value, start, end)</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>必需。填充的值。</td></tr><tr><td>start</td><td>可选。开始填充位置</td></tr><tr><td>end</td><td>可选。停止填充位置 (默认为 array.length)</td></tr><tr><td>返回值</td><td>数组</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,2,3,4,5,6]</span><br><span class="line">array.fill(99);</span><br></pre></td></tr></table></figure><h3 id="every-检测数值元素的每个元素是否都符合条件。"><a href="#every-检测数值元素的每个元素是否都符合条件。" class="headerlink" title="every() 检测数值元素的每个元素是否都符合条件。"></a>every() 检测数值元素的每个元素是否都符合条件。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</span><br><span class="line">every() 方法使用指定函数检测数组中的所有元素：如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。</span><br><span class="line">如果所有元素都满足条件，则返回 true。</span><br></pre></td></tr></table></figure><blockquote><pre><code>函数原型 array.every(function(currentValue,index,arr), thisValue)</code></pre></blockquote><blockquote></blockquote><p><span>参数说明</span></p><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/array_every.png?raw=true" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function checkAge(age)&#123;</span><br><span class="line">return age&gt;8;</span><br><span class="line">&#125;</span><br><span class="line">var array = new Array(2,3,4,5,18);</span><br><span class="line">array.every(checkAge); // false</span><br><span class="line">var array = new Array(18,8);</span><br><span class="line">array.every(checkAge);// true</span><br></pre></td></tr></table></figure><h3 id="fillter-过滤"><a href="#fillter-过滤" class="headerlink" title="fillter 过滤"></a>fillter 过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</span><br><span class="line">filter() 不会对空数组进行检测。</span><br><span class="line">filter() 不会改变原始数组。</span><br></pre></td></tr></table></figure><p><span>参数说明</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数原型 </span><br><span class="line">   array.filter(function(currentValue,index,arr), thisValue)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/array_every.png?raw=true" alt=""></p><table><thead><tr><th></th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>返回值</td><td>数组</td></tr></tbody></table><h3 id="entries-数组迭代对象"><a href="#entries-数组迭代对象" class="headerlink" title="entries 数组迭代对象"></a>entries 数组迭代对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entries() 方法返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)。</span><br><span class="line">迭代对象中数组的索引值作为 key， 数组元素作为 value。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型 array.entries()</span><br></pre></td></tr></table></figure><h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组。</span><br><span class="line">如果对象是数组返回 true，否则返回 false。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型 Array.from(object, mapFunction, thisValue)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>object</td><td>必需，要转换为数组的对象。</td></tr><tr><td>mapFunction</td><td>可选，数组中每个元素要调用的函数。</td></tr><tr><td>thisValue</td><td>可选，映射函数(mapFunction)中的 this 对象。</td></tr><tr><td>返回值</td><td>新数组</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = Array.from([1, 2, 3], x =&gt; x * 10);</span><br><span class="line">// arr[0] == 10;</span><br><span class="line">// arr[1] == 20;</span><br><span class="line">// arr[2] == 30;</span><br><span class="line"></span><br><span class="line">var myArr = Array.from(&quot;RUNOOB&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;h3 id
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>对角线表头的表格</title>
    <link href="http://yoursite.com/2018/05/09/%E5%AF%B9%E8%A7%92%E7%BA%BF%E8%A1%A8%E5%A4%B4%E7%9A%84%E8%A1%A8%E6%A0%BC/"/>
    <id>http://yoursite.com/2018/05/09/对角线表头的表格/</id>
    <published>2018-05-09T08:58:26.000Z</published>
    <updated>2018-05-11T08:36:28.605Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近项目要通过html实现部分页面</span><br></pre></td></tr></table></figure><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/table.png?raw=true" alt=""></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><pre><code>一开始打算使用画布去实现，在实现的过程中遇到了，一个很严重的问题，线存在着失真的现象，最后是通过transform去进行旋转。</code></pre></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><div style="background-color:red;width:100px;height:200px"><br>    <div style="width:150px;height:1px;background-color:yellow"></div><br>    <!--<div style="position:relative;left:50px">left</div>    <div>right</div>--><br></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
  </entry>
  
  <entry>
    <title>ul-li结构浮动</title>
    <link href="http://yoursite.com/2018/05/08/ul-li%E7%BB%93%E6%9E%84%E6%B5%AE%E5%8A%A8/"/>
    <id>http://yoursite.com/2018/05/08/ul-li结构浮动/</id>
    <published>2018-05-08T07:35:56.000Z</published>
    <updated>2018-05-11T08:36:38.926Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>AudioUnit</title>
    <link href="http://yoursite.com/2018/05/08/AudioUnit/"/>
    <id>http://yoursite.com/2018/05/08/AudioUnit/</id>
    <published>2018-05-08T01:01:43.000Z</published>
    <updated>2018-05-08T01:01:43.958Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MAC配置</title>
    <link href="http://yoursite.com/2018/05/08/Mac%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/05/08/Mac配置文件/</id>
    <published>2018-05-08T00:58:58.000Z</published>
    <updated>2018-05-08T05:50:57.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><blockquote><pre><code>本机数据库名称：mysql密码：123456</code></pre></blockquote><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><blockquote><pre><code>文件路径：/user/local/apache-tomcat-9.0.0.M20账号：root密码：123456</code></pre></blockquote><h2 id="apache列表"><a href="#apache列表" class="headerlink" title="apache列表"></a>apache列表</h2><blockquote><pre><code>文件路径 /Users/vd/WebSite</code></pre></blockquote><h2 id="本地git服务器"><a href="#本地git服务器" class="headerlink" title="本地git服务器"></a>本地git服务器</h2><blockquote></blockquote><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><blockquote><pre><code>1. git下载配置2. 下载giblet相应的文件3. 把下载的文件解压放到 相应的位置 例如：/usr/local/giblet4. 进入data目录 找到defaults.properties打开。大多数 配置项可使用缺省。修改 git.repositoriesFolder=/XXXXX/gitServer/gitRepository 然后找到  server.httpPort，设定http协议的端口号，这个端口号可随意指定。保存。5.启动服务 进入giblet文件 运行 ./gitblit.sh</code></pre></blockquote><p><img src="https://github.com/zhanggengwei/BlogImages/blob/master/Image/gitblish.png?raw=true" alt=""></p><h2 id="本地SVN服务器"><a href="#本地SVN服务器" class="headerlink" title="本地SVN服务器"></a>本地SVN服务器</h2><h3 id="搭建本地仓库"><a href="#搭建本地仓库" class="headerlink" title="搭建本地仓库"></a>搭建本地仓库</h3><blockquote><pre><code>1. 创建svn repository  svnadmin create /Users/vd/svn/repository   2. 配置用户的权限进入 /Users/vd/svn/repository/conf/目录下存在3个文件：authz、passwd、svnserve.confpasswd 添加账号以及密码authz 配置账号的权限3. 启动svn 服务器svnserve -d -r /Users/vd/svn/repository </code></pre></blockquote><h2 id="MAC-命令"><a href="#MAC-命令" class="headerlink" title="MAC 命令"></a>MAC 命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir 创建目录</span><br></pre></td></tr></table></figure><h1 id="软件使用记录"><a href="#软件使用记录" class="headerlink" title="软件使用记录"></a>软件使用记录</h1><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><h3 id="创建本地服务器"><a href="#创建本地服务器" class="headerlink" title="创建本地服务器"></a>创建本地服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装npm install -g live-server或者cnpm install live-server -gf </span><br><span class="line">再运行live-server就可以在http://127.0.0.1:8080访问</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MAC&quot;&gt;&lt;a href=&quot;#MAC&quot; class=&quot;headerlink&quot; title=&quot;MAC&quot;&gt;&lt;/a&gt;MAC&lt;/h1&gt;&lt;h2 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h
      
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
  </entry>
  
  <entry>
    <title>demo2</title>
    <link href="http://yoursite.com/2018/05/07/demo2/"/>
    <id>http://yoursite.com/2018/05/07/demo2/</id>
    <published>2018-05-07T12:17:14.000Z</published>
    <updated>2018-05-08T02:57:27.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sdfsdf"><a href="#sdfsdf" class="headerlink" title="sdfsdf"></a>sdfsdf</h1><h2 id="fdsfsdfsdf"><a href="#fdsfsdfsdf" class="headerlink" title="fdsfsdfsdf"></a>fdsfsdfsdf</h2><h3 id="fdfdfdfdfdf"><a href="#fdfdfdfdfdf" class="headerlink" title="fdfdfdfdfdf"></a>fdfdfdfdfdf</h3><p><a href="http://www.baidu.com" target="_blank" rel="noopener">图片</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int demo&#123;</span><br><span class="line"> System.out.println();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th><th>page</th></tr></thead><tbody><tr><td>dsf</td><td>dfd</td></tr></tbody></table><blockquote><p>sdfsdf<br>fsdfsdf<br>sfsdfsdf</p><p>fsdfsdfsdfsdf<br><a href="https://google.com/" target="_blank" rel="noopener">https://google.com/</a></p></blockquote><p><del>sdfsdf</del><br><del>删除</del></p><p><em>dfdf</em><br><strong>dfd</strong><br><strong><em>dsfsdf</em></strong></p><p><del>删除线</del></p><blockquote><pre><code>1 dfsfdf       fdsfsdfsdf. 2 dsfsdfsdfsdfsdffdsfsfdfsdfsdfsfsdf1 dfsfdf       fdsfsdfsdf. 2 dsfsdfsdfsdfsdffdsfsfdfsdfsdfsfsdf</code></pre></blockquote><table><thead><tr><th>fsfsdf</th><th>sdfsdf</th><th>sdfsdf</th></tr></thead><tbody><tr><td>fsdfsdf</td><td>fsdfsdf</td><td>sdfsdfsdfsfsdfsdfs</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public  int main()&#123;</span><br><span class="line"> System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>～～dsadsa～～</p><p><del>dsadasd</del></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;End</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">inp=&gt;Input</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;inp-&gt;op</span><br></pre></td></tr></table></figure><font> fdfdfd</font><p>\begin{aligned}?-?\ a=\dfrac {w}{t}\end{aligned}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sdfsdf&quot;&gt;&lt;a href=&quot;#sdfsdf&quot; class=&quot;headerlink&quot; title=&quot;sdfsdf&quot;&gt;&lt;/a&gt;sdfsdf&lt;/h1&gt;&lt;h2 id=&quot;fdsfsdfsdf&quot;&gt;&lt;a href=&quot;#fdsfsdfsdf&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="dd" scheme="http://yoursite.com/categories/dd/"/>
    
    
  </entry>
  
  <entry>
    <title>IOS-Audio</title>
    <link href="http://yoursite.com/2018/05/07/IOS-Audio/"/>
    <id>http://yoursite.com/2018/05/07/IOS-Audio/</id>
    <published>2018-05-07T00:58:58.000Z</published>
    <updated>2018-05-07T01:33:22.308Z</updated>
    
    <content type="html"><![CDATA[<pre><code>IOS-AuidoUnit# demo</code></pre><p> 1.</p><p> 2.</p><p> 3.</p><p>###有序列表</p><p>#这是一级标题</p><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;IOS-AuidoUnit
# demo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 1.&lt;/p&gt;
&lt;p&gt; 2.&lt;/p&gt;
&lt;p&gt; 3.&lt;/p&gt;
&lt;p&gt;###有序列表&lt;/p&gt;
&lt;p&gt;#这是一级标题&lt;/p&gt;
&lt;h2 id=&quot;这是二级标题&quot;&gt;&lt;a href=&quot;#这是二级标题
      
    
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
    
  </entry>
  
</feed>
